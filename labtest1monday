import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import butter, filtfilt


np.random.seed(0)  
minutes = 1440
time = np.arange(minutes)
base_level = 50 
traffic_variation = 30 * np.sin(2 * np.pi * time / 1440) 
noise = np.random.normal(0, 10, minutes)
pollution_data = base_level + traffic_variation + noise


def butter_lowpass(cutoff, fs, order=5):
    nyquist = 0.5 * fs
    normal_cutoff = cutoff / nyquist
    b, a = butter(order, normal_cutoff, btype='low', analog=False)
    return b, a

def lowpass_filter(data, cutoff, fs, order=5):
    b, a = butter_lowpass(cutoff, fs, order=order)
    y = filtfilt(b, a, data)
    return y

cutoff_frequency = 0.1 
sampling_rate = 1
filtered_data = lowpass_filter(pollution_data, cutoff_frequency, sampling_rate)


def compute_hourly_averages(data):
    hourly_averages = np.mean(data.reshape(-1, 60), axis=1)
    return hourly_averages

hourly_averages = compute_hourly_averages(pollution_data)
print("Hourly PM2.5 averages:")
for hour, avg in enumerate(hourly_averages):
    print(f"Hour {hour}: {avg:.2f} µg/m³")


plt.figure(figsize=(12, 6))
plt.plot(time, pollution_data, label='Original PM2.5 Data', linestyle='-', alpha=0.5)
plt.plot(time, filtered_data, label='Filtered PM2.5 Data', linestyle='--')

dangerous_hours = np.where(hourly_averages > 150)[0]
for hour in dangerous_hours:
    plt.axvspan(hour * 60, (hour + 1) * 60, color='red', alpha=0.2, label='Hazardous Hour' if hour == dangerous_hours[0] else "")

plt.title('PM2.5 Levels Over 24 Hours')
plt.xlabel('Minutes')
plt.ylabel('PM2.5 (µg/m³)')
plt.legend()
plt.grid()
plt.show()


exceeding_threshold = pollution_data > 200
consecutive_minutes = np.convolve(exceeding_threshold.astype(int), np.ones(10), 'valid') >= 10

start_indices = np.where(np.diff(consecutive_minutes.astype(int)) == 1)[0] + 10
end_indices = np.where(np.diff(consecutive_minutes.astype(int)) == -1)[0] + 10

plt.figure(figsize=(12, 6))
plt.plot(time, pollution_data, label='Original PM2.5 Data', linestyle='-', alpha=0.5)
plt.plot(time, filtered_data, label='Filtered PM2.5 Data', linestyle='--')

for start, end in zip(start_indices, end_indices):
    plt.scatter(np.arange(start, end), pollution_data[start:end], color='orange', marker='o', label='Peak > 200 µg/m³' if start == start_indices[0] else "")

plt.title('PM2.5 Levels Over 24 Hours with Peaks Highlighted')
plt.xlabel('Minutes')
plt.ylabel('PM2.5 (µg/m³)')
plt.legend()
plt.grid()
plt.show()
